CREATE DATABASE IF NOT EXISTS WALMARTSALES;
USE WALMARTSALES;

CREATE TABLE IF NOT EXISTS SALES(
	INVOICE_ID VARCHAR(30) PRIMARY KEY NOT NULL,
    BRANCH VARCHAR(5) NOT NULL,
    CITY VARCHAR(30) NOT NULL,
    CUSTOMER_TYPE VARCHAR(30) NOT NULL,
    GENDER VARCHAR(10) NOT NULL,
    PRODUCT_LINE VARCHAR(100) NOT NULL,
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    QUANTITY INT NOT NULL,
    VAT FLOAT NOT NULL,
    TOTAL DECIMAL(10,2) NOT NULL,
    DATE DATETIME NOT NULL,
    TIME TIME NOT NULL,
    PAYMENT_METHOD VARCHAR(15) NOT NULL,
    COGS DECIMAL(10,2) NOT NULL,
    GROSS_MARGIN_PCT FLOAT(11,9),
    GROSS_INCOME DECIMAL(14,2) NOT NULL,
    RATING FLOAT(2,1)
);
    
SELECT * FROM SALES;

-- 1. DATA WRANGLING (BUILD DATABSE, CREATE TABLE, CHECK NULLS)
-- 2. FEATURE ENGINEERING (GENERATE NEW COLUMNS FROM EXISTING ONES)
-- EG: TIME_OF_DAY

SELECT TIME,
CASE 
	WHEN 'TIME' BETWEEN '00:00:00' AND '12:00:00' THEN 'MORNING'
    WHEN 'TIME' BETWEEN '12:01:00' AND '16:00:00' THEN 'AFTERNOON'
    ELSE 'EVENING'
END AS 'TIME_OF_DAY'
FROM SALES;

ALTER TABLE SALES
ADD COLUMN TIME_OF_DAY VARCHAR(20);

UPDATE SALES
SET TIME_OF_DAY = (
	CASE
		WHEN `TIME` BETWEEN "00:00:00" AND "12:00:00" THEN "MORNING"
        WHEN `TIME` BETWEEN "12:01:00" AND "16:00:00" THEN "AFTERNOON"
        ELSE "EVENING"
    END
);

-- EDIT > PREF > SQL EDITOR > UNCHECK SAFE(UPDATE) > QUERY > RECONNECT TO SERVER > 'DONE'

-- II)DAY NAME
ALTER TABLE SALES
ADD COLUMN DAY_NAME VARCHAR(10);

UPDATE SALES
SET DAY_NAME = DAYNAME(DATE);

-- III) MONTH NAME
ALTER TABLE SALES
ADD COLUMN MONTH_NAME VARCHAR(10);

UPDATE SALES
SET MONTH_NAME = MONTHNAME(DATE);

SELECT * FROM SALES;

-- EDA 
-- GENERIC --
-- 1.HOW MANY UNIQUE CITIES, BRANCHES DOES DATA HAVE?
SELECT DISTINCT CITY FROM SALES;
SELECT DISTINCT BRANCH FROM SALES; 

-- 2.IN WHICH CITY IS EACH BRANCH?
SELECT DISTINCT CITY, BRANCH FROM SALES;

------ PRODUCT --------
-- 1.HOW MANY UNIQUE PRODUCT LINES AND MOST SELLING ONE
SELECT DISTINCT PRODUCT_LINE FROM SALES;
SELECT PRODUCT_LINE, COUNT(1) AS CNT
FROM SALES
GROUP BY 1 ORDER BY CNT DESC;

-- 2.MOST COMMON PAYMENT METHOD
SELECT PAYMENT_METHOD, COUNT(1) AS CNT
FROM SALES
GROUP BY 1 ORDER BY CNT DESC;
    
-- 3.TOTAL REVENUE BY MONTH
SELECT MONTH_NAME AS MONTH,
SUM(TOTAL) AS TOTAL_SALES
FROM SALES
GROUP BY 1 ORDER BY 2 DESC;

-- 4.WHICH MONTH HAD LARGEST COGS?
SELECT MONTH_NAME AS MONTH,
SUM(COGS) AS COGS
FROM SALES
GROUP BY 1 ORDER BY 2 DESC;

-- 5.WHICH PRODUCT LINE HAD LARGEST REVENUE
SELECT PRODUCT_LINE,
SUM(TOTAL) AS TOTAL_REVENUE
FROM SALES
GROUP BY 1 ORDER BY 2 DESC;

-- 6.WHICH CITY HAD LARGEST REVENUE
SELECT CITY,
SUM(TOTAL) AS TOTAL_REVENUE
FROM SALES
GROUP BY 1 ORDER BY 2 DESC;

-- ADD COLUMN - GOOD, BAD. 'GOOD' IF GREATER THAN AVG SALES


-- WHICH BRAND SOLD MORE THAN AVG PRODUCTS
SELECT BRANCH,
SUM(QUANTITY) AS QTY
FROM SALES
GROUP BY 1
HAVING SUM(QUANTITY) > (SELECT AVG(QUANTITY) FROM SALES);

-- WHAT IS AVG RATING OF EACH PRODUCT LINE
SELECT PRODUCT_LINE,
ROUND(AVG(RATING),2) AS AVG_RATING
FROM SALES
GROUP BY 1 ORDER BY 2 DESC;

-- SALES --
-- NUMBER OF SALES MADE IN EACH TIME OF DAY PER WEEKDAY
SELECT TIME_OF_DAY,
COUNT(*) AS TOTAL_SALES
FROM SALES
WHERE DAY_NAME = "MONDAY"
GROUP BY 1 ORDER BY 2 DESC;

-- WHICH CUSTOMER TYPE BRINGS MOST REVENUE
SELECT CUSTOMER_TYPE,
SUM(TOTAL) AS TOTAL_REV
FROM SALES
GROUP BY 1 ORDER BY 2 DESC;

-- WHICH CITY HAS LARGEST VAT
SELECT CITY,
SUM(VAT) AS VAT
FROM SALES
GROUP BY 1 ORDER BY 2 DESC LIMIT 1;

-- CUSTOMERS --
-- MOST COMMON CUSTOMER TYPE --
SELECT CUSTOMER_TYPE,
COUNT(*) AS CNT
FROM SALES
GROUP BY 1 ORDER BY 2 DESC;

-- MOST COMMON GENDER OF CUSTOMERS --
SELECT GENDER,
COUNT(*) AS CNT
FROM SALES
GROUP BY 1 ORDER BY 2 DESC;

-- WHICH TIME OF DAY CUSTOMERS GIVE MOST RATINGS PER BRANCH
SELECT TIME_OF_DAY,
AVG(RATING) AS AVG_RATING
FROM SALES
WHERE BRANCH = 'B'
GROUP BY 1 ORDER BY 2 DESC;
